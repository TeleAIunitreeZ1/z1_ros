// Generated by gencpp from file vision_module/ObjectDetection.msg
// DO NOT EDIT!


#ifndef VISION_MODULE_MESSAGE_OBJECTDETECTION_H
#define VISION_MODULE_MESSAGE_OBJECTDETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision_module
{
template <class ContainerAllocator>
struct ObjectDetection_
{
  typedef ObjectDetection_<ContainerAllocator> Type;

  ObjectDetection_()
    : label()
    , x(0.0)
    , y(0.0)
    , depth(0.0)  {
    }
  ObjectDetection_(const ContainerAllocator& _alloc)
    : label(_alloc)
    , x(0.0)
    , y(0.0)
    , depth(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _label_type;
  _label_type label;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _depth_type;
  _depth_type depth;





  typedef boost::shared_ptr< ::vision_module::ObjectDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision_module::ObjectDetection_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectDetection_

typedef ::vision_module::ObjectDetection_<std::allocator<void> > ObjectDetection;

typedef boost::shared_ptr< ::vision_module::ObjectDetection > ObjectDetectionPtr;
typedef boost::shared_ptr< ::vision_module::ObjectDetection const> ObjectDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision_module::ObjectDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision_module::ObjectDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vision_module::ObjectDetection_<ContainerAllocator1> & lhs, const ::vision_module::ObjectDetection_<ContainerAllocator2> & rhs)
{
  return lhs.label == rhs.label &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.depth == rhs.depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vision_module::ObjectDetection_<ContainerAllocator1> & lhs, const ::vision_module::ObjectDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vision_module

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::vision_module::ObjectDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision_module::ObjectDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_module::ObjectDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision_module::ObjectDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_module::ObjectDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision_module::ObjectDetection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision_module::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c811d8df461a90868e78656a89fbe92";
  }

  static const char* value(const ::vision_module::ObjectDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c811d8df461a908ULL;
  static const uint64_t static_value2 = 0x68e78656a89fbe92ULL;
};

template<class ContainerAllocator>
struct DataType< ::vision_module::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision_module/ObjectDetection";
  }

  static const char* value(const ::vision_module::ObjectDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision_module::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ObjectDetection.msg\n"
"string label\n"
"float32 x\n"
"float32 y\n"
"float32 depth\n"
"\n"
;
  }

  static const char* value(const ::vision_module::ObjectDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision_module::ObjectDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.label);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision_module::ObjectDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision_module::ObjectDetection_<ContainerAllocator>& v)
  {
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.label);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION_MODULE_MESSAGE_OBJECTDETECTION_H
